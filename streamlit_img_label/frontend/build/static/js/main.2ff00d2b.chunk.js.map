{"version":3,"sources":["StreamlitImgLabel.module.css","StreamlitImgLabel.tsx","index.tsx"],"names":["module","exports","withStreamlitConnection","props","mode","setMode","useState","canvas","setCanvas","fabric","Canvas","canvasWidth","canvasHeight","imageData","args","newBBoxIndex","setNewBBoxIndex","newPointIndex","setNewPointIndex","invisCanvas","document","createElement","ctx","getContext","dataUri","width","height","idata","createImageData","data","set","putImageData","toDataURL","useEffect","canvasTmp","enableRetinaScaling","backgroundImage","uniScaleTransform","Streamlit","setFrameHeight","sendCoordinates","rects","getObjects","filter","rect","isType","map","i","getBoundingRect","points","point","getCenterPoint","setComponentValue","on","handleEvent","renderAll","off","onSelectMode","body","classList","add","remove","window","matchMedia","addEventListener","e","matches","removeEventListener","React","Fragment","id","className","styles","dark","onClick","addBoxHandler","box","left","top","Rect","fill","objectCaching","stroke","boxColor","strokeWidth","strokeUniform","hasRotatingPoint","addPointHandler","Circle","radius","pointColor","removeHandler","selectObject","getActiveObject","clearAllHandler","forEach","ReactDOM","render","StrictMode","StreamlitImgLabel","getElementById"],"mappings":"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","file":"static/js/main.2ff00d2b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"StreamlitImgLabel_dark__PyW4C\"};","import React, { useEffect, useState } from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { fabric } from \"fabric\"\nimport styles from \"./StreamlitImgLabel.module.css\"\n\ninterface FabricObjectProps {\n    top: number\n    left: number\n    width: number\n    height: number\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    rects: FabricObjectProps[]\n    points: FabricObjectProps[]\n    boxColor: string\n    pointColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst StreamlitImgLabel = (props: ComponentProps) => {\n    const [mode, setMode] = useState<string>(\"light\")\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n    const [newBBoxIndex, setNewBBoxIndex] = useState<number>(0)\n    const [newPointIndex, setNewPointIndex] = useState<number>(0)\n\n    /*\n     * Translate Python image data to a JavaScript Image\n     */\n    var invisCanvas = document.createElement(\"canvas\")\n    var ctx = invisCanvas.getContext(\"2d\")\n\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n\n    // create imageData object\n    let dataUri: any\n    if (ctx) {\n        var idata = ctx.createImageData(canvasWidth, canvasHeight)\n\n        // set our buffer as source\n        idata.data.set(imageData)\n\n        // update canvas with new data\n        ctx.putImageData(idata, 0, 0)\n        dataUri = invisCanvas.toDataURL()\n    } else {\n        dataUri = \"\"\n    }\n\n    // Initialize canvas on mount and add a rectangle\n    useEffect(() => {\n        // const { points, rects, boxColor, pointColor }: PythonArgs = props.args\n        const canvasTmp = new fabric.Canvas(\"c\", {\n            enableRetinaScaling: false,\n            backgroundImage: dataUri,\n            uniScaleTransform: true,\n        })\n\n        // rects.forEach((rect) => {\n        //     const { top, left, width, height } = rect\n        //     canvasTmp.add(\n        //         new fabric.Rect({\n        //             left,\n        //             top,\n        //             fill: \"\",\n        //             width,\n        //             height,\n        //             objectCaching: true,\n        //             stroke: boxColor,\n        //             strokeWidth: 1,\n        //             strokeUniform: true,\n        //             hasRotatingPoint: false,\n        //         })\n        //     )\n        // })\n\n        setCanvas(canvasTmp)\n        Streamlit.setFrameHeight()\n        // eslint-disable-next-line\n    }, [canvasHeight, canvasWidth, dataUri])\n\n    // Create defualt bounding box\n    const defaultBox = () => ({\n        left: canvasWidth * 0.15 + newBBoxIndex * 3,\n        top: canvasHeight * 0.15 + newBBoxIndex * 3,\n        width: canvasWidth * 0.2,\n        height: canvasHeight * 0.2,\n    })\n\n    const defaultPoint = () => ({\n        left: canvasWidth * 0.15 + newPointIndex * 3,\n        top: canvasHeight * 0.15 + newPointIndex * 3,\n        width: canvasWidth * 0.01,\n        height: canvasHeight * 0.01,\n    })\n\n    // Add new bounding box to be image\n    const addBoxHandler = () => {\n        if (newBBoxIndex === 50) {\n            setNewBBoxIndex(0);\n        } else {\n            setNewBBoxIndex(newBBoxIndex + 1);\n        }\n        const box = defaultBox()\n        canvas.add(\n            new fabric.Rect({\n                ...box,\n                fill: \"\",\n                objectCaching: true,\n                stroke: props.args.boxColor,\n                strokeWidth: 1,\n                strokeUniform: true,\n                hasRotatingPoint: false,\n            })\n        )\n        sendCoordinates()\n    }\n\n    const addPointHandler = () => {\n        if (newPointIndex === 50) {\n            setNewPointIndex(0);\n        } else {\n            setNewPointIndex(newPointIndex + 1);\n        }\n        const point = defaultPoint()\n        canvas.add(\n            new fabric.Circle({\n                ...point,\n                radius: point.width,\n                fill: props.args.pointColor,\n                objectCaching: true,\n                stroke: props.args.pointColor,\n                strokeWidth: 1,\n                strokeUniform: true,\n                hasRotatingPoint: false,\n            })\n        )\n        sendCoordinates()\n    }\n\n    // Remove the selected bounding box\n    const removeHandler = () => {\n        // const selectIndex = canvas.getObjects().indexOf(selectObject)\n        const selectObject = canvas.getActiveObject()\n        canvas.remove(selectObject)\n        sendCoordinates()\n    }\n\n    // Remove all the bounding boxes\n    const clearAllHandler = () => {\n        setNewBBoxIndex(0)\n        setNewPointIndex(0)\n        canvas.getObjects().forEach((rect) => canvas.remove(rect))\n        sendCoordinates()\n    }\n\n    // Send the coordinates of the rectangle back to streamlit.\n    const sendCoordinates = () => {\n        const rects = canvas.getObjects()\n            .filter(rect => rect.isType(\"rect\"))\n            .map((rect, i) => ({\n                ...rect.getBoundingRect()\n            }))\n        const points = canvas.getObjects()\n            .filter(point => point.isType(\"circle\"))\n            .map((point, i) => ({\n                ...point.getCenterPoint(),\n            }))\n        Streamlit.setComponentValue({ rects, points })\n    }\n\n    // Update the bounding boxes when modified\n    useEffect(() => {\n        if (!canvas) {\n            return\n        }\n        const handleEvent = () => {\n            canvas.renderAll()\n            sendCoordinates()\n        }\n\n        canvas.on(\"object:modified\", handleEvent)\n        return () => {\n            canvas.off(\"object:modified\")\n        }\n    })\n\n    // Adjust the theme according to the system\n    const onSelectMode = (mode: string) => {\n        setMode(mode)\n        if (mode === \"dark\") document.body.classList.add(\"dark-mode\")\n        else document.body.classList.remove(\"dark-mode\")\n    }\n\n    useEffect(() => {\n        // Add listener to update styles\n        window\n            .matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", (e) =>\n                onSelectMode(e.matches ? \"dark\" : \"light\")\n            )\n\n        // Setup dark/light mode for the first time\n        onSelectMode(\n            window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n                ? \"dark\"\n                : \"light\"\n        )\n\n        // Remove listener\n        return () => {\n            window\n                .matchMedia(\"(prefers-color-scheme: dark)\")\n                .removeEventListener(\"change\", () => {})\n        }\n    }, [])\n\n    return (\n        <>\n            <canvas\n                id=\"c\"\n                className={mode === \"dark\" ? styles.dark : \"\"}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n            <div className={mode === \"dark\" ? styles.dark : \"\"}>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={addBoxHandler}\n                >\n                    새로운 박스 생성\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={addPointHandler}\n                >\n                    새로운 포인트 생성\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={removeHandler}\n                >\n                    선택한 박스/포인트 제거\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={clearAllHandler}\n                >\n                    모든 박스/포인트 제거\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default withStreamlitConnection(StreamlitImgLabel)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitImgLabel from \"./StreamlitImgLabel\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitImgLabel />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}